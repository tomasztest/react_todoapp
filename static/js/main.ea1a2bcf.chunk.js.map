{"version":3,"sources":["components/AddTask.js","components/Task.js","components/TaskList.js","components/App.js","serviceWorker.js","index.js"],"names":["AddTask","minDate","Date","toISOString","slice","state","text","checked","date","_this","handleText","e","setState","target","value","handleCheckbox","handleDate","handleClick","console","log","_this$state","length","props","add","alert","maxDate","this","react_default","a","createElement","className","type","placeholder","onChange","id","htmlFor","min","max","onClick","Component","Task","_props$task","task","active","important","finishDate","style","color","change","delete","finish","toLocaleString","TaskList","tasks","filter","done","sort","b","activeTasks","map","components_Task","key","doneTasks","Fragment","fontSize","App","counter","deleteTask","Object","toConsumableArray","changeTaskStatus","Array","from","forEach","getTime","addTask","prevState","concat","src_components_AddTask","components_TaskList","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ea1a2bcf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./AddTask.css\";\r\n\r\nclass AddTask extends Component {\r\n  minDate = new Date().toISOString().slice(0, 10);\r\n\r\n  state = {\r\n    text: \"\",\r\n    checked: false,\r\n    date: this.minDate\r\n  };\r\n\r\n  handleText = e => {\r\n    this.setState({\r\n      text: e.target.value\r\n    });\r\n  };\r\n\r\n  handleCheckbox = e => {\r\n    this.setState({\r\n      checked: e.target.checked\r\n    });\r\n  };\r\n\r\n  handleDate = e => {\r\n    this.setState({\r\n      date: e.target.value\r\n    });\r\n  };\r\n\r\n  handleClick = () => {\r\n    console.log(\"dodaj\");\r\n    const { text, checked, date } = this.state;\r\n    if (text.length > 2) {\r\n      const add = this.props.add(text, date, checked);\r\n      if (add) {\r\n        this.setState({\r\n          text: \"\",\r\n          checked: false,\r\n          date: this.minDate\r\n        });\r\n      }\r\n    } else {\r\n      alert(\"za krótka nazwa\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let maxDate = this.minDate.slice(0, 4) * 1 + 1;\r\n    maxDate = maxDate + \"-12-31\";\r\n    return (\r\n      <div className=\"form\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"dodaj zadanie\"\r\n          value={this.state.text}\r\n          onChange={this.handleText}\r\n        />\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.state.checked}\r\n          id=\"important\"\r\n          onChange={this.handleCheckbox}\r\n        />\r\n        <label htmlFor=\"important\">Priorytet</label>\r\n        <br />\r\n        <label htmlFor=\"date\">Do kiedy zrobić</label>\r\n        <input\r\n          type=\"date\"\r\n          value={this.state.date}\r\n          min={this.minDate}\r\n          max={maxDate}\r\n          onChange={this.handleDate}\r\n        />\r\n        <br />\r\n        <button onClick={this.handleClick}>Dodaj</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTask;\r\n","import React from \"react\";\r\n\r\nconst Task = props => {\r\n  const style = {\r\n    color: \"red\"\r\n  };\r\n  const { text, date, id, active, important, finishDate } = props.task;\r\n\r\n  if (active) {\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong style={important ? style : null}>{text}</strong> - do{\" \"}\r\n          <span>{date} </span>\r\n          <button onClick={() => props.change(id)}>Zostało zrobione</button>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  } else {\r\n    const finish = new Date(finishDate).toLocaleString();\r\n    return (\r\n      <div>\r\n        <p>\r\n          <strong>{text}</strong>\r\n          <em> (zrobić do {date})</em>\r\n          <br />- potwierdzenie wykonania <span>{finish}</span>\r\n          <button onClick={() => props.delete(id)}>X</button>\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\n\r\nconst TaskList = props => {\r\n  const active = props.tasks.filter(task => task.active);\r\n  const done = props.tasks.filter(task => !task.active);\r\n  // console.log(active, done);\r\n\r\n  // done.sort((a, b) => {\r\n  //   return b.finishDate - a.finishDate;\r\n  // });\r\n\r\n  if (done.length >= 2) {\r\n    done.sort((a, b) => {\r\n      if (a.finishDate < b.finishDate) {\r\n        return 1;\r\n      }\r\n      if (a.finishDate > b.finishDate) {\r\n        return -1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n\r\n  if (active.length >= 2) {\r\n    active.sort((a, b) => {\r\n      if (a.date < b.date) {\r\n        return -1;\r\n      }\r\n      if (a.date > b.date) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n  }\r\n  const activeTasks = active.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  const doneTasks = done.map(task => (\r\n    <Task\r\n      key={task.id}\r\n      task={task}\r\n      delete={props.delete}\r\n      change={props.change}\r\n    />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <div className=\"active\">\r\n        <h2>\r\n          Zadania do zrobienia <em>({active.length})</em>\r\n        </h2>\r\n        {activeTasks.length > 0 ? activeTasks : <p>Brak zadań</p>}\r\n      </div>\r\n\r\n      <hr />\r\n\r\n      <div className=\"done\">\r\n        <h3>\r\n          Zadania zrobione <em>({done.length})</em>\r\n        </h3>\r\n        {done.length > 5 && (\r\n          <span style={{ fontSize: \"12px\" }}>\r\n            wyświetlonych jest jedynie 5 ostatnich zadań\r\n          </span>\r\n        )}\r\n        {doneTasks.slice(0, 5)}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TaskList;\r\n","import React, { Component } from \"react\";\nimport AddTask from \"./AddTask\";\nimport TaskList from \"./TaskList\";\nimport \"./App.css\";\n\nclass App extends Component {\n  counter = 2;\n  state = {\n    tasks: [\n      {\n        id: 0,\n        text: \"nauczyć się noda\",\n        date: \"2019-12-31\",\n        important: false,\n        active: true,\n        finishDate: null\n      },\n      {\n        id: 1,\n        text: \"posprzątać\",\n        date: \"2019-09-11\",\n        important: true,\n        active: true,\n        finishDate: null\n      }\n    ]\n  };\n\n  deleteTask = id => {\n    // // console.log(\"delete id \" + id);\n    // const tasks = [...this.state.tasks];\n    // const index = tasks.findIndex(task => task.id === id);\n    // tasks.splice(index, 1);\n\n    // this.setState({\n    //   tasks\n    // });\n\n    let tasks = [...this.state.tasks];\n    tasks = tasks.filter(task => task.id !== id);\n\n    this.setState({\n      tasks\n    });\n  };\n\n  changeTaskStatus = id => {\n    console.log(\"change id \" + id);\n    const tasks = Array.from(this.state.tasks);\n    tasks.forEach(task => {\n      if (task.id === id) {\n        task.active = false;\n        task.finishDate = new Date().getTime();\n      }\n    });\n\n    this.setState({\n      tasks\n    });\n  };\n\n  addTask = (text, date, important) => {\n    // console.log(\"obiekt dodany\");\n    const task = {\n      id: this.counter,\n      text,\n      date,\n      important,\n      active: true,\n      finishDate: null\n    };\n    this.counter++;\n    console.log(task, this.counter);\n\n    this.setState(prevState => ({\n      tasks: [...prevState.tasks, task]\n    }));\n    return true;\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>TODO app </h1>\n        <AddTask add={this.addTask} />\n        <TaskList\n          tasks={this.state.tasks}\n          delete={this.deleteTask}\n          change={this.changeTaskStatus}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}